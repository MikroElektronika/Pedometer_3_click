{
Example for Pedometer3 Click

    Date          : sep 2018.
    Author        : Katarina Perendic

Test configuration AVR :
    
    MCU              : ATMEGA32
    Dev. Board       : EasyAVR v7 
    AVR Compiler ver : v7.0.1.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes SPI module and sets INT pin, AN pin and RST pin as INPUT and CS pin as OUTPUT
- Application Initialization - Initialization driver init and  start configuration chip for measurement
- Application Task - (code snippet) - Reads Accel and High Pass Accel X/Y/Z axis and detect Tilt Position.
                                      All data logs on the USBUART every 500 ms.
- note
    The start configuration chip is required at the beginning of each program so that the chip wakes up and prepares for operation and measurement. 
    What is included and set in the start-up function can be viewed in the help file.
}
program Click_Pedometer3_AVR;

uses Click_Pedometer3_types, Click_Pedometer3_config;

var
    X_accelAxis : int16_t; 
    Y_accelAxis : int16_t; 
    Z_accelAxis : int16_t; 
    X_hpAxis : int16_t; 
    Y_hpAxis : int16_t; 
    Z_hpAxis : int16_t; 
    CurrentTiltPosition : uint8_t; 
    PreviousTiltPosition : uint8_t; 
    pedStep : uint16_t; 
    demoText : array[50] of char; 
    
procedure systemInit(); 
begin
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_AN_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT); 
    mikrobus_spiInit(_MIKROBUS1, @_PEDOMETER3_SPI_CFG[0]); 
    mikrobus_logInit(_LOG_USBUART, 115200); 
    mikrobus_logWrite(' --- System Init --- ', _LOG_LINE); 
    Delay_ms(100); 
end;

procedure applicationInit(); 
begin
    pedometer3_spiDriverInit(T_PEDOMETER3_P(@_MIKROBUS1_GPIO), T_PEDOMETER3_P(@_MIKROBUS1_SPI)); 
    pedometer3_startConfiguration(); 
    pedometer3_writeByte(_PEDOMETER3_REG_CONTROL_1, (((((_PEDOMETER3_CNTL1_MODE_LOW_POWER or _PEDOMETER3_CNTL1_RES_MODE_LOWER_NOISE) or _PEDOMETER3_CNTL1_DATA_READY_DISABLE) or _PEDOMETER3_CNTL1_G_RANGE_2g) or _PEDOMETER3_CNTL1_TAP_ENABLE) or _PEDOMETER3_CNTL1_PEDOMETER_ENABLE) or _PEDOMETER3_CNTL1_TILT_ENABLE); 
    pedometer3_testCommunication(); 
    Delay_1sec(); 
end;

procedure applicationTask(); 
begin
    pedometer3_getAccelAxis(@X_accelAxis, @Y_accelAxis, @Z_accelAxis); 
    pedometer3_getHighPassAccelAxis(@X_hpAxis, @Y_hpAxis, @Z_hpAxis); 
    pedStep := pedStep + pedometer3_getPedometerStepCounter(); 
    mikrobus_logWrite('|___________ Pedometer 3 click _____________|', _LOG_LINE); 
    mikrobus_logWrite('|  Data    |  X axis  |  Y axis  |  Z axis  |', _LOG_LINE); 
    mikrobus_logWrite('|  Accel   |', _LOG_TEXT); 
    IntToStr(X_accelAxis, demoText); 
    mikrobus_logWrite(demoText, _LOG_TEXT); 
    mikrobus_logWrite('    |', _LOG_TEXT); 
    IntToStr(Y_accelAxis, demoText); 
    mikrobus_logWrite(demoText, _LOG_TEXT); 
    mikrobus_logWrite('    |', _LOG_TEXT); 
    IntToStr(Z_accelAxis, demoText); 
    mikrobus_logWrite(demoText, _LOG_TEXT); 
    mikrobus_logWrite('    |', _LOG_LINE); 
    mikrobus_logWrite('| HP Accel |', _LOG_TEXT); 
    IntToStr(X_hpAxis, demoText); 
    mikrobus_logWrite(demoText, _LOG_TEXT); 
    mikrobus_logWrite('    |', _LOG_TEXT); 
    IntToStr(Y_hpAxis, demoText); 
    mikrobus_logWrite(demoText, _LOG_TEXT); 
    mikrobus_logWrite('    |', _LOG_TEXT); 
    IntToStr(Z_hpAxis, demoText); 
    mikrobus_logWrite(demoText, _LOG_TEXT); 
    mikrobus_logWrite('    |', _LOG_LINE); 
    mikrobus_logWrite('|___________________________________________|', _LOG_LINE); 
    mikrobus_logWrite('| Pedometer step counter :', _LOG_TEXT); 
    IntToStr(pedStep, demoText); 
    mikrobus_logWrite(demoText, _LOG_TEXT); 
    mikrobus_logWrite('            |', _LOG_LINE); 
    mikrobus_logWrite('|___________________________________________|', _LOG_LINE); 
    pedometer3_getTiltPosition(@CurrentTiltPosition, @PreviousTiltPosition); 
    mikrobus_logWrite('| Current Tilt Position  :', _LOG_TEXT); 
    case CurrentTiltPosition of
        1 :
        begin
            mikrobus_logWrite('- LEFT            |', _LOG_LINE); 
        end;
        2 :
        begin
            mikrobus_logWrite('- RIGHT           |', _LOG_LINE); 
        end;
        3 :
        begin
            mikrobus_logWrite('- DOWN            |', _LOG_LINE); 
        end;
        4 :
        begin
            mikrobus_logWrite('- UP              |', _LOG_LINE); 
        end;
        5 :
        begin
            mikrobus_logWrite('- FACE DOWN       |', _LOG_LINE); 
        end;
        6 :
        begin
            mikrobus_logWrite('- FACE UP         |', _LOG_LINE); 
        end;
    end;
    mikrobus_logWrite('|___________________________________________|', _LOG_LINE); 
    mikrobus_logWrite('  ', _LOG_LINE); 
    Delay_ms(400); 
end;

begin
    pedStep := 0;

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;
end.